from mypy.plugin import FunctionContext as FunctionContext
from mypy.types import FunctionLike as FunctionLike, Type as MypyType
from returns.contrib.mypy._structures.args import FuncArg as FuncArg
from typing import List, Tuple

def analyze(ctx: FunctionContext) -> MypyType: ...

class _PartialFunctionReducer:
    def __init__(self, default_return_type: FunctionLike, original: FunctionLike, applied_args: List[FuncArg], ctx: FunctionContext) -> None: ...
    def new_partial(self) -> MypyType: ...

class _AppliedArgs:
    def __init__(self, function_ctx: FunctionContext) -> None: ...
    def get_callable_from_context(self) -> MypyType: ...
    def build_from_context(self) -> Tuple[bool, List[FuncArg]]: ...
