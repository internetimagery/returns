import abc
from abc import abstractmethod
from returns.primitives.laws import LawSpecDef as LawSpecDef, Lawful as Lawful

class _LawSpec(LawSpecDef):
    def reflexive_law(first: _EqualType) -> None: ...
    def symmetry_law(first: _EqualType, second: _EqualType) -> None: ...
    def transitivity_law(first: _EqualType, second: _EqualType, third: _EqualType) -> None: ...

class Equable(Lawful['Equable'], metaclass=abc.ABCMeta):
    @abstractmethod
    def equals(self, other: _EqualType) -> bool: ...
