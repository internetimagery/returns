from returns.context.requires_context_future_result import RequiresContextFutureResult as RequiresContextFutureResult
from returns.context.requires_context_ioresult import RequiresContextIOResult as RequiresContextIOResult
from returns.context.requires_context_result import RequiresContextResult as RequiresContextResult
from returns.future import FutureResult as FutureResult
from returns.interfaces.specific import reader as reader
from returns.io import IOResult as IOResult
from returns.primitives.container import BaseContainer as BaseContainer
from returns.primitives.hkt import Kind2 as Kind2, SupportsKind2 as SupportsKind2
from returns.result import Result as Result
from typing import Any, Callable, ClassVar

NoDeps = Any

class RequiresContext(BaseContainer, SupportsKind2['RequiresContext', _ReturnType, _EnvType], reader.ReaderBased2[_ReturnType, _EnvType]):
    no_args: ClassVar[NoDeps] = ...
    def __init__(self, inner_value: Callable[[_EnvType], _ReturnType]) -> None: ...
    def __call__(self, deps: _EnvType) -> _ReturnType: ...
    def map(self, function: Callable[[_ReturnType], _NewReturnType]) -> RequiresContext[_NewReturnType, _EnvType]: ...
    def apply(self, container: Kind2[RequiresContext, Callable[[_ReturnType], _NewReturnType], _EnvType]) -> RequiresContext[_NewReturnType, _EnvType]: ...
    def bind(self, function: Callable[[_ReturnType], Kind2[RequiresContext, _NewReturnType, _EnvType]]) -> RequiresContext[_NewReturnType, _EnvType]: ...
    bind_context: Any = ...
    def modify_env(self, function: Callable[[_NewEnvType], _EnvType]) -> RequiresContext[_ReturnType, _NewEnvType]: ...
    @classmethod
    def ask(cls: Any) -> RequiresContext[_EnvType, _EnvType]: ...
    @classmethod
    def from_value(cls: Any, inner_value: _FirstType) -> RequiresContext[_FirstType, NoDeps]: ...
    @classmethod
    def from_context(cls: Any, inner_value: RequiresContext[_NewReturnType, _NewEnvType]) -> RequiresContext[_NewReturnType, _NewEnvType]: ...
    @classmethod
    def from_requires_context_result(cls: Any, inner_value: RequiresContextResult[_ValueType, _ErrorType, _EnvType]) -> RequiresContext[Result[_ValueType, _ErrorType], _EnvType]: ...
    @classmethod
    def from_requires_context_ioresult(cls: Any, inner_value: RequiresContextIOResult[_ValueType, _ErrorType, _EnvType]) -> RequiresContext[IOResult[_ValueType, _ErrorType], _EnvType]: ...
    @classmethod
    def from_requires_context_future_result(cls: Any, inner_value: RequiresContextFutureResult[_ValueType, _ErrorType, _EnvType]) -> RequiresContext[FutureResult[_ValueType, _ErrorType], _EnvType]: ...
Reader = RequiresContext
