from mypy.types import CallableType as CallableType, FunctionLike as FunctionLike, Type as MypyType
from returns.contrib.mypy._structures.args import FuncArg as FuncArg
from typing import List

def proper_type(case_functions: List[CallableType]) -> FunctionLike: ...

class Intermediate:
    def __init__(self, case_function: CallableType) -> None: ...
    def with_applied_args(self, applied_args: List[FuncArg]) -> CallableType: ...
    def with_signature(self, new_args: List[FuncArg]) -> CallableType: ...
    def with_ret_type(self, ret_type: MypyType) -> CallableType: ...

class Functions:
    def __init__(self, original: CallableType, intermediate: CallableType) -> None: ...
    def diff(self) -> CallableType: ...
