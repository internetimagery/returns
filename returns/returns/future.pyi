from returns.interfaces.specific.future import FutureBased1 as FutureBased1
from returns.interfaces.specific.future_result import FutureResultBased2 as FutureResultBased2
from returns.io import IO as IO, IOResult as IOResult
from returns.primitives.container import BaseContainer as BaseContainer
from returns.primitives.hkt import Kind1 as Kind1, Kind2 as Kind2, SupportsKind1 as SupportsKind1, SupportsKind2 as SupportsKind2
from returns.result import Result as Result
from typing import Any, Awaitable, Callable, Coroutine, Generator

async def async_identity(instance: _FirstType) -> _FirstType: ...

class Future(BaseContainer, SupportsKind1['Future', _ValueType], FutureBased1[_ValueType]):
    def __init__(self, inner_value: Awaitable[_ValueType]) -> None: ...
    def __await__(self) -> Generator[None, None, IO[_ValueType]]: ...
    async def awaitable(self) -> IO[_ValueType]: ...
    def map(self, function: Callable[[_ValueType], _NewValueType]) -> Future[_NewValueType]: ...
    def apply(self, container: Kind1[Future, Callable[[_ValueType], _NewValueType]]) -> Future[_NewValueType]: ...
    def bind(self, function: Callable[[_ValueType], Kind1[Future, _NewValueType]]) -> Future[_NewValueType]: ...
    bind_future: Any = ...
    def bind_async(self, function: Callable[[_ValueType], Awaitable[Kind1[Future, _NewValueType]]]) -> Future[_NewValueType]: ...
    bind_async_future: Any = ...
    def bind_awaitable(self, function: Callable[[_ValueType], Awaitable[_NewValueType]]) -> Future[_NewValueType]: ...
    def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> Future[_NewValueType]: ...
    @classmethod
    def from_value(cls: Any, inner_value: _NewValueType) -> Future[_NewValueType]: ...
    @classmethod
    def from_future(cls: Any, inner_value: Future[_NewValueType]) -> Future[_NewValueType]: ...
    @classmethod
    def from_io(cls: Any, inner_value: IO[_NewValueType]) -> Future[_NewValueType]: ...
    @classmethod
    def from_future_result(cls: Any, inner_value: FutureResult[_NewValueType, _NewErrorType]) -> Future[Result[_NewValueType, _NewErrorType]]: ...

def future(function: Callable[..., Coroutine[_FirstType, _SecondType, _ValueType]]) -> Callable[..., Future[_ValueType]]: ...
def asyncify(function: Callable[..., _ValueType]) -> Callable[..., Coroutine[Any, Any, _ValueType]]: ...

class FutureResult(BaseContainer, SupportsKind2['FutureResult', _ValueType, _ErrorType], FutureResultBased2[_ValueType, _ErrorType]):
    def __init__(self, inner_value: Awaitable[Result[_ValueType, _ErrorType]]) -> None: ...
    def __await__(self) -> Generator[None, None, IOResult[_ValueType, _ErrorType]]: ...
    async def awaitable(self) -> IOResult[_ValueType, _ErrorType]: ...
    def swap(self) -> FutureResult[_ErrorType, _ValueType]: ...
    def map(self, function: Callable[[_ValueType], _NewValueType]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def apply(self, container: Kind2[FutureResult, Callable[[_ValueType], _NewValueType], _ErrorType]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def bind(self, function: Callable[[_ValueType], Kind2[FutureResult, _NewValueType, _ErrorType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    bind_future_result: Any = ...
    def bind_async(self, function: Callable[[_ValueType], Awaitable[Kind2[FutureResult, _NewValueType, _ErrorType]]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    bind_async_future_result: Any = ...
    def bind_awaitable(self, function: Callable[[_ValueType], Awaitable[_NewValueType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def bind_result(self, function: Callable[[_ValueType], Result[_NewValueType, _ErrorType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def bind_ioresult(self, function: Callable[[_ValueType], IOResult[_NewValueType, _ErrorType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def bind_io(self, function: Callable[[_ValueType], IO[_NewValueType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def bind_future(self, function: Callable[[_ValueType], Future[_NewValueType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def bind_async_future(self, function: Callable[[_ValueType], Awaitable[Future[_NewValueType]]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> FutureResult[_ValueType, _NewErrorType]: ...
    def lash(self, function: Callable[[_ErrorType], Kind2[FutureResult, _ValueType, _NewErrorType]]) -> FutureResult[_ValueType, _NewErrorType]: ...
    def compose_result(self, function: Callable[[Result[_ValueType, _ErrorType]], Kind2[FutureResult, _NewValueType, _ErrorType]]) -> FutureResult[_NewValueType, _ErrorType]: ...
    @classmethod
    def from_typecast(cls: Any, inner_value: Future[Result[_NewValueType, _NewErrorType]]) -> FutureResult[_NewValueType, _NewErrorType]: ...
    @classmethod
    def from_future(cls: Any, inner_value: Future[_NewValueType]) -> FutureResult[_NewValueType, Any]: ...
    @classmethod
    def from_failed_future(cls: Any, inner_value: Future[_NewErrorType]) -> FutureResult[Any, _NewErrorType]: ...
    @classmethod
    def from_future_result(cls: Any, inner_value: FutureResult[_NewValueType, _NewErrorType]) -> FutureResult[_NewValueType, _NewErrorType]: ...
    @classmethod
    def from_io(cls: Any, inner_value: IO[_NewValueType]) -> FutureResult[_NewValueType, Any]: ...
    @classmethod
    def from_failed_io(cls: Any, inner_value: IO[_NewErrorType]) -> FutureResult[Any, _NewErrorType]: ...
    @classmethod
    def from_ioresult(cls: Any, inner_value: IOResult[_NewValueType, _NewErrorType]) -> FutureResult[_NewValueType, _NewErrorType]: ...
    @classmethod
    def from_result(cls: Any, inner_value: Result[_NewValueType, _NewErrorType]) -> FutureResult[_NewValueType, _NewErrorType]: ...
    @classmethod
    def from_value(cls: Any, inner_value: _NewValueType) -> FutureResult[_NewValueType, Any]: ...
    @classmethod
    def from_failure(cls: Any, inner_value: _NewErrorType) -> FutureResult[Any, _NewErrorType]: ...

def FutureSuccess(inner_value: _NewValueType) -> FutureResult[_NewValueType, Any]: ...
def FutureFailure(inner_value: _NewErrorType) -> FutureResult[Any, _NewErrorType]: ...

FutureResultE: Any

def future_safe(function: Callable[..., Coroutine[_FirstType, _SecondType, _ValueType]]) -> Callable[..., FutureResultE[_ValueType]]: ...
