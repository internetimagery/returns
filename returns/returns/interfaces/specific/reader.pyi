import abc
from abc import abstractmethod
from returns.context import NoDeps as NoDeps, RequiresContext as RequiresContext
from returns.interfaces.container import Container2 as Container2, Container3 as Container3
from returns.primitives.hkt import Kind2 as Kind2, Kind3 as Kind3
from returns.primitives.laws import LawSpecDef as LawSpecDef, Lawful as Lawful
from typing import Callable, Type

class Contextable(metaclass=abc.ABCMeta):
    @abstractmethod
    def __call__(self, deps: _EnvType) -> _ValueType: ...

class ReaderLike2(Container2[_FirstType, _SecondType], metaclass=abc.ABCMeta):
    @property
    @abstractmethod
    def no_args(self) -> NoDeps: ...
    @abstractmethod
    def bind_context(self, function: Callable[[_FirstType], RequiresContext[_UpdatedType, _SecondType]]) -> Kind2[_ReaderLike2Type, _UpdatedType, _SecondType]: ...
    @abstractmethod
    def modify_env(self, function: Callable[[_UpdatedType], _SecondType]) -> Kind2[_ReaderLike2Type, _FirstType, _UpdatedType]: ...
    @classmethod
    @abstractmethod
    def ask(cls: Type[_ReaderLike2Type]) -> Kind2[_ReaderLike2Type, _SecondType, _SecondType]: ...
    @classmethod
    @abstractmethod
    def from_context(cls: Type[_ReaderLike2Type], inner_value: RequiresContext[_ValueType, _EnvType]) -> Kind2[_ReaderLike2Type, _ValueType, _EnvType]: ...

class CallableReader2(ReaderLike2[_FirstType, _SecondType], Contextable[_ValueType, _EnvType], metaclass=abc.ABCMeta): ...

class ReaderLike3(Container3[_FirstType, _SecondType, _ThirdType], metaclass=abc.ABCMeta):
    @property
    @abstractmethod
    def no_args(self) -> NoDeps: ...
    @abstractmethod
    def bind_context(self, function: Callable[[_FirstType], RequiresContext[_UpdatedType, _ThirdType]]) -> Kind3[_ReaderLike3Type, _UpdatedType, _SecondType, _ThirdType]: ...
    @abstractmethod
    def modify_env(self, function: Callable[[_UpdatedType], _ThirdType]) -> Kind3[_ReaderLike3Type, _FirstType, _SecondType, _UpdatedType]: ...
    @classmethod
    @abstractmethod
    def ask(cls: Type[_ReaderLike3Type]) -> Kind3[_ReaderLike3Type, _ThirdType, _SecondType, _ThirdType]: ...
    @classmethod
    @abstractmethod
    def from_context(cls: Type[_ReaderLike3Type], inner_value: RequiresContext[_ValueType, _EnvType]) -> Kind3[_ReaderLike3Type, _ValueType, _SecondType, _EnvType]: ...

class CallableReader3(ReaderLike3[_FirstType, _SecondType, _ThirdType], Contextable[_ValueType, _EnvType], metaclass=abc.ABCMeta): ...

class _LawSpec(LawSpecDef):
    def purity_law(container: ReaderBased2[_FirstType, _SecondType], env: _SecondType) -> None: ...
    def asking_law(container: ReaderBased2[_FirstType, _SecondType], env: _SecondType) -> None: ...

class ReaderBased2(CallableReader2[_FirstType, _SecondType, _FirstType, _SecondType], Lawful['ReaderBased2[_FirstType, _SecondType]'], metaclass=abc.ABCMeta): ...
