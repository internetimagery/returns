from abc import ABCMeta
from inspect import FrameInfo as FrameInfo
from returns.interfaces.specific import result as result
from returns.primitives.container import BaseContainer as BaseContainer
from returns.primitives.hkt import Kind2 as Kind2, SupportsKind2 as SupportsKind2
from typing import Any, Callable, ClassVar, List, NoReturn, Optional, Type, Union

class Result(BaseContainer, SupportsKind2['Result', _ValueType, _ErrorType], result.ResultBased2[_ValueType, _ErrorType], metaclass=ABCMeta):
    __match_args__: Any = ...
    success_type: ClassVar[Type[Success]]
    failure_type: ClassVar[Type[Failure]]
    equals: Any = ...
    @property
    def trace(self) -> Optional[List[FrameInfo]]: ...
    def swap(self) -> Result[_ErrorType, _ValueType]: ...
    def map(self, function: Callable[[_ValueType], _NewValueType]) -> Result[_NewValueType, _ErrorType]: ...
    def apply(self, container: Kind2[Result, Callable[[_ValueType], _NewValueType], _ErrorType]) -> Result[_NewValueType, _ErrorType]: ...
    def bind(self, function: Callable[[_ValueType], Kind2[Result, _NewValueType, _ErrorType]]) -> Result[_NewValueType, _ErrorType]: ...
    bind_result: Any = ...
    def alt(self, function: Callable[[_ErrorType], _NewErrorType]) -> Result[_ValueType, _NewErrorType]: ...
    def lash(self, function: Callable[[_ErrorType], Kind2[Result, _ValueType, _NewErrorType]]) -> Result[_ValueType, _NewErrorType]: ...
    def value_or(self, default_value: _NewValueType) -> Union[_ValueType, _NewValueType]: ...
    def unwrap(self) -> _ValueType: ...
    def failure(self) -> _ErrorType: ...
    @classmethod
    def from_value(cls: Any, inner_value: _NewValueType) -> Result[_NewValueType, Any]: ...
    @classmethod
    def from_failure(cls: Any, inner_value: _NewErrorType) -> Result[Any, _NewErrorType]: ...
    @classmethod
    def from_result(cls: Any, inner_value: Result[_NewValueType, _NewErrorType]) -> Result[_NewValueType, _NewErrorType]: ...

class Failure(Result[Any, _ErrorType]):
    def __init__(self, inner_value: _ErrorType) -> None: ...
    def swap(self) -> None: ...
    def unwrap(self) -> NoReturn: ...
    def failure(self) -> _ErrorType: ...

class Success(Result[_ValueType, Any]):
    def __init__(self, inner_value: _ValueType) -> None: ...
    def swap(self) -> None: ...
    def unwrap(self) -> _ValueType: ...
    def failure(self) -> NoReturn: ...

ResultE: Any

def safe(function: Callable[..., _ValueType]) -> Callable[..., ResultE[_ValueType]]: ...
